name: Terraform

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.9.4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Initialize Terraform
      run: terraform init -upgrade
      working-directory: ./terraform

    - name: Apply Terraform
      run: terraform apply -auto-approve -json | tee terraform_output.json
      working-directory: ./terraform

    - name: Extract Terraform Outputs
      id: extract_outputs
      run: |
        dynamodb_table_name=$(terraform output -raw dynamodb_table_name)
        initialize_function_url=$(terraform output -raw initialize_dynamodb_url)
        lambda_function_url=$(terraform output -raw lambda_function_url)

        echo "DYNAMODB_TABLE_NAME=$dynamodb_table_name" >> $GITHUB_ENV
        echo "INITIALIZE_FUNCTION_URL=$initialize_function_url" >> $GITHUB_ENV
        echo "LAMBDA_FUNCTION_URL=$lambda_function_url" >> $GITHUB_ENV

    - name: Update scripts.js with dynamic parameters
      run: |
        cd frontend
        # Update the scripts.js file
        sed -i "s|LAMBDA_FUNCTION_URL|${{ env.LAMBDA_FUNCTION_URL }}|g" scripts.js
        sed -i "s|INITIALIZE_FUNCTION_URL|${{ env.INITIALIZE_FUNCTION_URL }}|g" scripts.js
        sed -i "s|DYNAMODB_TABLE_NAME|${{ env.DYNAMODB_TABLE_NAME }}|g" scripts.js
      env:
        LAMBDA_FUNCTION_URL: ${{ env.LAMBDA_FUNCTION_URL }}
        INITIALIZE_FUNCTION_URL: ${{ env.INITIALIZE_FUNCTION_URL }}
        DYNAMODB_TABLE_NAME: ${{ env.DYNAMODB_TABLE_NAME }}

    - name: Extract bucket name from terraform.tfvars
      id: extract_bucket_name
      run: |
        bucket_name=$(grep 'bucket_name' terraform/terraform.tfvars | cut -d '=' -f2 | tr -d ' "')
        echo "BUCKET_NAME=$bucket_name" >> $GITHUB_ENV

    - name: Deploy scripts.js to S3
      run: |
        aws s3 cp frontend/scripts.js s3://${{ env.BUCKET_NAME }}/scripts.js
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        BUCKET_NAME: ${{ env.BUCKET_NAME }}