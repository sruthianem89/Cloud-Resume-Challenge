name: Terraform Workflow

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.9.4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init -upgrade

    - name: Terraform Refresh
      working-directory: ./terraform
      run: terraform refresh

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve

    - name: Extract Terraform Outputs
      id: extract_outputs
      working-directory: ./terraform
      run: |
        dynamodb_table_name=$(terraform output -raw dynamodb_table_name | tr -d '\n')
        initialize_function_url=$(terraform output -raw initialize_dynamodb_url | tr -d '\n')
        lambda_function_url=$(terraform output -raw lambda_function_url | tr -d '\n')
        bucket_name=$(terraform output -raw bucket_name | tr -d '\n')
        
        echo "DYNAMODB_TABLE_NAME=$dynamodb_table_name" >> $GITHUB_ENV
        echo "INITIALIZE_FUNCTION_URL=$initialize_function_url" >> $GITHUB_ENV
        echo "LAMBDA_FUNCTION_URL=$lambda_function_url" >> $GITHUB_ENV
        echo "BUCKET_NAME=$bucket_name" >> $GITHUB_ENV

    - name: Update scripts.js with dynamic parameters
      if: ${{ env.LAMBDA_FUNCTION_URL != '' && env.INITIALIZE_FUNCTION_URL != '' && env.DYNAMODB_TABLE_NAME != '' && env.BUCKET_NAME != '' }}
      working-directory: ./frontend/js
      run: |
        # Update the scripts.js file
        sed -i "s|LAMBDA_FUNCTION_URL|${{ env.LAMBDA_FUNCTION_URL }}|g" scripts.js
        sed -i "s|INITIALIZE_FUNCTION_URL|${{ env.INITIALIZE_FUNCTION_URL }}|g" scripts.js
        sed -i "s|DYNAMODB_TABLE_NAME|${{ env.DYNAMODB_TABLE_NAME }}|g" scripts.js
      env:
        LAMBDA_FUNCTION_URL: ${{ env.LAMBDA_FUNCTION_URL }}
        INITIALIZE_FUNCTION_URL: ${{ env.INITIALIZE_FUNCTION_URL }}
        DYNAMODB_TABLE_NAME: ${{ env.DYNAMODB_TABLE_NAME }}
        BUCKET_NAME: ${{ env.BUCKET_NAME }}

    - name: Upload updated scripts.js to S3
      if: ${{ env.LAMBDA_FUNCTION_URL && env.INITIALIZE_FUNCTION_URL && env.DYNAMODB_TABLE_NAME && env.BUCKET_NAME }}
      run: |
          echo "BUCKET_NAME is $BUCKET_NAME"
          echo "Bucket Name: ${{ env.BUCKET_NAME }}"
          aws s3 cp frontend/js/scripts.js s3://${BUCKET_NAME}/js/scripts.js
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LAMBDA_FUNCTION_URL: ${{ env.LAMBDA_FUNCTION_URL }}
          INITIALIZE_FUNCTION_URL: ${{ env.INITIALIZE_FUNCTION_URL }}
          DYNAMODB_TABLE_NAME: ${{ env.DYNAMODB_TABLE_NAME }}
          BUCKET_NAME: ${{ env.BUCKET_NAME }}